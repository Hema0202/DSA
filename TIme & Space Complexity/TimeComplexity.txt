Que-1.find first element of Array
arr = [1,5,8,7]
in arr find out first element it takes 3ms.

arr1 = [8,12,5,5,9,5,6,2]
in arr1 find out first element it also takes 3ms.

arr2 = [5,10,20,4,6,4,........,n]
in arr2 find out first element it also takes 3ms.

so from the above calculation we get first element in 3ms. so, how many element in the array it takes time of 3ms to find first element. so, it is constant.

TimeComplexity--> O(1)-->constant


Que-2.find the sum of array element

arr = [1,2,3]
        +  +
time = 3ms 3x

arr1 = [1,2,3,4,5]
         + + + +
time = 5ms 5x

arr2 = [1,......,20]
         + + + + +
time = 20ms 20x

arr3 = [1,...........,n]
         + + + + + + +
time = nms n*x
here, element is increase so, time also increases. thats why this is linear frequency.

TimeComplexity--> O(n)--> linear frequency


Que-3.find the sum of all the element in  range 1-n^2

input = 1
time = 1x

input = 3
time = 9x

input = 4
time = 16x

input = n
time = n^2*x
here, input increase then their time increase into square. so, TimeComplexity
is square.

TimeComplexity--> O(n^2)--> square


Some Examples:

Q-1.int main(){  
      int i=0;                  
      for(i=1;i<=10;i++){      //O(n)
      printf("%d \n",i);      //O(1)
    }     
    return 0;  
   }  
--> above example TimeComplexity is =O(1)*O(n)
                                    =O(n)

Q-2.int main()  
{  
   int n;
   printf("Enter the value of n :");  
   for(int i=1;i<=n;i++)              //O(n)
   {  
       for(int j=1;j<=10;j++)         //O(n)
       {  
           printf("%d\t",(i*j));     //O(1)
       }  
       printf("\n");                 //O(1)
   }  
}
--> above example TimeComplexity is =O(n)*O(n)*O(1)*O(1)
                                    =O(n)*O(n)
                                    =O(n^2)
here, we ignore the constant O(1).here loops are nested thats why first loop is outer loop and second is inner loop so, we multiply their TimeComplexity.

Q-3.int main()
{ 
    int x; 
    x = 2+3;  //O(1)
    printf(x);
}
--> above example TimeComplexity is =O(1)

Q-4. int main()
{
    for(i = 0; i < 10; i++) {    //O(n)
        printf("%d\n", i);       //O(1)
    }
        
    for(i = 10; i >= 0; i--) {   //O(n)
        printf("%d\n", i);       //O(1)
    }
}
--> above example TimeComplexity is =O(n)+O(n)
                                    =O(2n)
                                    =O(n)
here,2 loops are their siblings that's why we use plus.ignore constant so it become O(n).

in short,
5         --> 1
6n        --> n
5 + n     --> n
n^2 + n   --> n^2
n^2 + k   --> n^2 + k 
 if k < n --> n^2

